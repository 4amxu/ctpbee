.. _快速开始:

快速开始
===================

先让我来说说一些杂话吧
得益于vnpy的强大底层 (Pybind11牛逼), 能够让Python快速获得ctp相应的底层API支撑

flask的微核心设计结构的来了无限的可能性, 能够让你快速上手量化开发.

我将这两者结合起来,组装成了ctpbee, 当然ctpbee的所有设计都是为了简化你的开发, 我们不会制定数据库连接方式 ,或者告知你如何进行载入数据. ctpbee只会暴露出相应的接口, 然后全靠你的双手打造 一切都由你自由定义.
当然得益于设计, 你可以通过简单轻巧的API在执行的地方访问到任何你想要的数据, 自由即是一切

请认真阅读这个概念-> ctpbee是一个简易二次开发的框架 ,而不是一个完整的量化产品


以下代码告诉你如何快速开始ctpbee ::

    from ctpbee import CtpBee
    from ctpbee import CtpbeeApi


    class DataRecorder(CtpbeeApi):
        """ap"""
        def __init__(self, extension_name): # 你可以在这里自定义扩展参数
            super().__init__(extension_name, api_type="data")

    app = CtpBee("ctpbee", __name__)
    info = {
        "CONNECT_INFO": {
            "userid": "",
            "password": "",
            "brokerid": "",
            "md_address": "",
            "td_address": "",
            "appid": "",
            "auth_code": "",
        },
        "TD_FUNC": True,
    }
    recorder = DataRecoreder("data_recorder")
    app.config.from_mapping(info)  #
    app.add_extension(recorder)
    app.start()



代码解释：

# 创建核心账户对象,对于咩个账户都有一份独立的Ctpbee对象
app = CtpBee("ctpbee", __name__)


# class DataRecorder(CtpbeeApi):
通过继承CtpbeeApi对象来操作核心数据

# 创建实例
recorder = DataRecoreder("data_recorder")

app.config.from_mapping(info)  #从dict中载入信息,对于更多载入方式,请参阅 :ref:`配置文件`.

载入操作对象到app.extensions中去
app.add_extension(recorder)

开启处理功能
app.start() #




